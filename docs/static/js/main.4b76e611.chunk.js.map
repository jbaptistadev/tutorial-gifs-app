{"version":3,"sources":["components/Button.module.scss","components/GifGridItem.module.scss","components/GifGrid.module.scss","components/Button.js","components/AddCategory.js","components/GifGridItem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","pages/gitexpertapp.js","index.js"],"names":["module","exports","STYLES","styles","SIZES","Button","children","type","onClick","className","size","checkStyles","includes","checkSize","base","join","AddCategory","setCategories","useState","value","setValue","onSubmit","event","preventDefault","trim","length","values","onChange","target","GifGridItem","title","url","container","src","alt","getGifs","category","a","fetch","response","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GitExpertApp","categories","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,gBAAgB,0BAA0B,KAAO,qBAAqB,OAAS,uBAAuB,MAAQ,sBAAsB,OAAS,uBAAuB,MAAQ,sBAAsB,cAAgB,8BAA8B,QAAU,wBAAwB,UAAY,4B,sBCAhTD,EAAOC,QAAU,CAAC,UAAY,iC,gBCA9BD,EAAOC,QAAU,CAAC,UAAY,6B,yKCGxBC,EAAS,CAACC,IAAM,QAAaA,IAAM,WAEnCC,EAAQ,CAACD,IAAM,MAAWA,IAAM,OAAYA,IAAM,OA8BzCE,EA5BA,SAAC,GAMT,IALLC,EAKI,EALJA,SAKI,IAJJC,YAII,MAJG,SAIH,EAHJC,EAGI,EAHJA,QAGI,IAFJC,iBAEI,MAFQ,UAER,MADJC,YACI,MADG,SACH,EACEC,EAAcT,EAAOU,SAASH,GAChCN,IAAOM,GACPP,EAAO,GACLW,EAAYT,EAAMQ,SAASF,GAAQP,IAAOO,GAAQN,EAAM,GAE9D,OACE,4BACEG,KAAMA,EACNE,UAAW,CAACN,IAAOW,KAAMH,EAAaE,GAAWE,KAAK,KACtDP,QAASA,GAERF,ICWQU,EAhCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGfC,mBAFL,IADoB,mBAGlCC,EAHkC,KAG3BC,EAH2B,KAczC,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAMC,iBAEFJ,EAAMK,OAAOC,OAAS,IACxBR,GAAc,SAACS,GAAD,OAAaP,GAAb,mBAAuBO,OACrCN,EATiB,OAejB,2BACEb,KAAK,OACLY,MAAOA,EACPQ,SAAU,SAACL,GAAD,OAAWF,EAASE,EAAMM,OAAOT,UAE7C,kBAAC,EAAD,CAAQT,KAAK,QAAQH,KAAK,UAA1B,W,gBCXSsB,EAXK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,yBAAKtB,UAAWN,IAAO6B,WACrB,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,wCCNGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCK,EADjC,6BAFR,oCAEQ,SAEEE,MAAMP,GAFR,cAEfQ,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,GAAId,EAAP,EAAOA,MAAOe,EAAd,EAAcA,OAAd,MAA4B,CAChDD,GAAIA,EACJd,MAAOA,EACPC,IAAG,OAAEc,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBf,QARX,kBAWdW,GAXc,4CAAH,sDC0BLK,EAtBC,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EACdlB,mBAAS,CACjCuB,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRhB,EAAQC,GAAUgB,MAAK,SAACC,GACtBH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGZ,CAACZ,IAEGa,EDX2BK,CAAalB,GAAjCS,EADkB,EACxBJ,KAAcO,EADU,EACVA,QAEtB,OACE,oCACE,4BAAKZ,GACJY,GACC,uBAAGvC,UAAU,oCAAb,cAEF,yBAAKA,UAAS,UAAKN,IAAO6B,UAAZ,uCACXa,EAAOF,KAAI,gBAAGb,EAAH,EAAGA,MAAOc,EAAV,EAAUA,GAAIb,EAAd,EAAcA,IAAd,OACV,kBAAC,EAAD,CAAaD,MAAOA,EAAOC,IAAKA,EAAKwB,IAAKX,UEYrCY,EAzBM,WACnB,IADyB,EAGWtC,mBAFf,IADI,mBAGlBuC,EAHkB,KAGNxC,EAHM,KAUzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACGwC,EAAWd,KAAI,SAACP,EAAUsB,GAAX,OACd,kBAAC,EAAD,CAASH,IAAKG,EAAOtB,SAAUA,UCjBzCuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.4b76e611.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"primary-color\":\"#274765,#63cace,#d1d1fb\",\"base\":\"Button_base__1qbZh\",\"ripple\":\"Button_ripple__2x9hI\",\"small\":\"Button_small__3g1wS\",\"medium\":\"Button_medium__3Rwh7\",\"large\":\"Button_large__1iYrX\",\"navbar_button\":\"Button_navbar_button__3RUG9\",\"primary\":\"Button_primary__qrr19\",\"secondary\":\"Button_secondary__1sG9u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GifGridItem_container__3UApc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GifGrid_container__6yQsQ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Button.module.scss';\n\nconst STYLES = [styles['primary'], styles['secondary']];\n\nconst SIZES = [styles['small'], styles['medium'], styles['large']];\n\nconst Button = ({\n  children,\n  type = 'button',\n  onClick,\n  className = 'primary',\n  size = 'medium',\n}) => {\n  const checkStyles = STYLES.includes(className)\n    ? styles[className]\n    : STYLES[0];\n  const checkSize = SIZES.includes(size) ? styles[size] : SIZES[0];\n\n  return (\n    <button\n      type={type}\n      className={[styles.base, checkStyles, checkSize].join(' ')}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  children: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '../components/Button';\n\nconst AddCategory = ({ setCategories }) => {\n  const initialState = '';\n\n  const [value, setValue] = useState(initialState);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (value.trim().length > 2) {\n      setCategories((values) => [value, ...values]);\n      setValue(initialState);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(event) => setValue(event.target.value)}\n      />\n      <Button size=\"small\" type=\"submit\">\n        agree\n      </Button>\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React from 'react';\n//import PropTypes from 'prop-types';\nimport styles from './GifGridItem.module.scss';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className={styles.container}>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\n//GifGridItem.propTypes = {};\n\nexport default GifGridItem;\n","const apiKey = 'cg7kVp59eA66qa1oWQEkCfuLx4ZrZS4N';\n\nexport const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=${apiKey}`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map(({ id, title, images }) => ({\n    id: id,\n    title: title,\n    url: images?.downsized_medium.url,\n  }));\n\n  return gifs;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GifGridItem from './GifGridItem';\nimport styles from './GifGrid.module.scss';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && (\n        <p className=\"animate__animated animate__flash\">loading...</p>\n      )}\n      <div className={`${styles.container} animate__animated animate__fadeIn`}>\n        {images.map(({ title, id, url }) => (\n          <GifGridItem title={title} url={url} key={id} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  categorie: PropTypes.string,\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/GetGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state; //{ data:[], loading: true}\n};\n","import React, { useState } from 'react';\nimport AddCategory from '../components/AddCategory';\nimport GifGrid from '../components/GifGrid';\n\nconst GitExpertApp = () => {\n  const initialState = [];\n\n  const [categories, setCategories] = useState(initialState);\n\n  /*  const handleAdd = () => {\n    //setCategories((values) => [...values, 'Hunter x Hunter']);\n    setCategories([...categories, 'Hunter x Hunter']);\n  }; */\n\n  return (\n    <>\n      <h2>GitExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category, index) => (\n          <GifGrid key={index} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GitExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from './pages/gitexpertapp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GitExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}